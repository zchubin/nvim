*acp.txt*       Automatically opens popup menu for completions.

        Copyright (c) 2012-2012 John Eikenberry
        Copyright (c) 2007-2009 Takeshi NISHIDA

ACP                                                         *acp*

INTRODUCTION                    |acp-introduction|
INSTALLATION                    |acp-installation|
USAGE                           |acp-usage|
COMMANDS                        |acp-commands|
OPTIONS                         |acp-options|
SPECIAL THANKS                  |acp-thanks|
CHANGELOG                       |acp-changelog|
ABOUT                           |acp-about|


==============================================================================
INTRODUCTION                                                *acp-introduction*

With this plugin, your vim comes to automatically opens popup menu for
completions when you enter characters or move the cursor in Insert mode. It
won't prevent you continuing entering characters.


==============================================================================
INSTALLATION                                                *acp-installation*

Put all files into your runtime directory. If you have the zip file, extract
it to your runtime directory.

You should place the files as follows:
>
        <your runtime directory>/plugin/acp.vim
        <your runtime directory>/doc/acp.txt
        ...
<
If you disgust to jumble up this plugin and other plugins in your runtime
directory, put the files into new directory and just add the directory path to
'runtimepath'. It's easy to uninstall the plugin.

And then update your help tags files to enable fuzzyfinder help. See
|add-local-help| for details.


==============================================================================
USAGE                                                              *acp-usage*

Once this plugin is installed, auto-popup is enabled at startup by default.

Which completion method is used depends on the text before the cursor. The
default behavior is as follows:

        kind      filetype    text before the cursor ~
        Keyword   *           two keyword characters
        Filename  *           a filename character + a path separator 
                              + 0 or more filename character
        Omni      ruby        ".", "::" or non-word character + ":"
                              (|+ruby| required.)
        Omni      python      "." (|+python| required.)
        Omni      xml         "<", "</" or ("<" + non-">" characters + " ")
        Omni      html/xhtml  "<", "</" or ("<" + non-">" characters + " ")
        Omni      css         (":", ";", "{", "^", "@", or "!")
                              + 0 or 1 space

Also, you can make user-defined completion and snipMate's trigger completion
(|acp-snipMate|) auto-popup if the options are set.

These behavior are customizable.

                                                                *acp-snipMate*
snipMate's Trigger Completion ~

snipMate's trigger completion enables you to complete a snippet trigger
provided by snipMate plugin
(http://www.vim.org/scripts/script.php?script_id=2540) and expand it.


To enable auto-popup for this completion, add following function to
plugin/snipMate.vim:
>
  fun! GetSnipsInCurrentScope()
    let snips = {}
    for scope in [bufnr('%')] + split(&ft, '\.') + ['_']
      call extend(snips, get(s:snippets, scope, {}), 'keep')
      call extend(snips, get(s:multi_snips, scope, {}), 'keep')
    endfor
    return snips
  endf
<
And set |g:acp_behaviorSnipmateLength| option to 1.

There is the restriction on this auto-popup, that the word before cursor must
consist only of uppercase characters.

                                                               *acp-perl-omni*
Perl Omni-Completion ~

ACP supports perl-completion.vim
(http://www.vim.org/scripts/script.php?script_id=2852).

To enable auto-popup for this completion, set |g:acp_behaviorPerlOmniLength|
option to 0 or more.

                                                               *acp-go-omni*
Go Omni-Completion ~

ACP supports go-completion.vim
(https://github.com/nsf/gocode).

To enable auto-popup for this completion, set |g:acp_behaviorGoOmniLength|
option to 0 or more.


==============================================================================
COMMANDS                                                        *acp-commands*

                                                                  *:AcpEnable*
:AcpEnable
        enables auto-popup.

                                                                 *:AcpDisable*
:AcpDisable
        disables auto-popup.

                                                                    *:AcpLock*
:AcpLock
        suspends auto-popup temporarily.

        For the purpose of avoiding interruption to another script, it is
        recommended to insert this command and |:AcpUnlock| than |:AcpDisable|
        and |:AcpEnable| .

                                                                  *:AcpUnlock*
:AcpUnlock
        resumes auto-popup suspended by |:AcpLock| .


==============================================================================
OPTIONS                                                          *acp-options*

                                                    *g:acp_enableAtStartup*  >
  let g:acp_enableAtStartup = 1
<
        If non-zero, auto-popup is enabled at startup.

                                                      *g:acp_mappingDriven*  >
  let g:acp_mappingDriven = 0
<
        If non-zero, auto-popup is triggered by key mappings instead of
        |CursorMovedI| event. This is useful to avoid auto-popup by moving
        cursor in Insert mode.

                                                   *g:acp_ignorecaseOption*  >
  let g:acp_ignorecaseOption = 1
<
        Value set to 'ignorecase' temporarily when auto-popup.

                                                     *g:acp_completeOption*  >
  let g:acp_completeOption = '.,w,b,k'
<
        Value set to 'complete' temporarily when auto-popup.

                                                 *g:acp_completeoptPreview*  >
  let g:acp_completeoptPreview = 0
<
        If non-zero, "preview" is added to 'completeopt' when auto-popup.

                                        *g:acp_behaviorUserDefinedFunction*  >
  let g:acp_behaviorUserDefinedFunction = ''
<
        |g:acp_behavior-completefunc| for user-defined completion. If empty,
        this completion will be never attempted.

                                           *g:acp_behaviorUserDefinedMeets*  >
  let g:acp_behaviorUserDefinedMeets = ''
<
        |g:acp_behavior-meets| for user-defined completion. If empty, this
        completion will be never attempted.

                                             *g:acp_behaviorSnipmateLength*  >
  let g:acp_behaviorSnipmateLength = -1
<
        Pattern before the cursor, which are needed to attempt
        snipMate-trigger completion.

                                             *g:acp_behaviorKeywordCommand*  >
  let g:acp_behaviorKeywordCommand = "\<C-n>"
<
        Command for keyword completion. This option is usually set "\<C-n>" or
        "\<C-p>".

                                              *g:acp_behaviorKeywordLength*  >
  let g:acp_behaviorKeywordLength = 2
<
        Length of keyword characters before the cursor, which are needed to
        attempt keyword completion. If negative value, this completion will be
        never attempted.

                                             *g:acp_behaviorKeywordIgnores*  >
  let g:acp_behaviorKeywordIgnores = []
<
        List of string. If a word before the cursor matches to the front part
        of one of them, keyword completion won't be attempted.

        E.g., when there are too many keywords beginning with "get" for the
        completion and auto-popup by entering "g", "ge", or "get" causes
        response degradation, set ["get"] to this option and avoid it.

                                                 *g:acp_behaviorFileLength*  >
  let g:acp_behaviorFileLength = 0
<
        Length of filename characters before the cursor, which are needed to
        attempt filename completion. If negative value, this completion will
        be never attempted.

                                       *g:acp_behaviorRubyOmniMethodLength*  >
  let g:acp_behaviorRubyOmniMethodLength = 0
<
        Length of keyword characters before the cursor, which are needed to
        attempt ruby omni-completion for methods. If negative value, this
        completion will be never attempted.

                                       *g:acp_behaviorRubyOmniSymbolLength*  >
  let g:acp_behaviorRubyOmniSymbolLength = 1
<
        Length of keyword characters before the cursor, which are needed to
        attempt ruby omni-completion for symbols. If negative value, this
        completion will be never attempted.

                                           *g:acp_behaviorPythonOmniLength*  >
  let g:acp_behaviorPythonOmniLength = 0
<
        Length of keyword characters before the cursor, which are needed to
        attempt python omni-completion. If negative value, this completion
        will be never attempted.

                                             *g:acp_behaviorPerlOmniLength*  >
  let g:acp_behaviorPerlOmniLength = -1
<
        Length of keyword characters before the cursor, which are needed to
        attempt perl omni-completion. If negative value, this completion will
        be never attempted.

        See also: |acp-perl-omni|

                                              *g:acp_behaviorXmlOmniLength*  >
  let g:acp_behaviorXmlOmniLength = 0
<
        Length of keyword characters before the cursor, which are needed to
        attempt XML omni-completion. If negative value, this completion will
        be never attempted.

                                             *g:acp_behaviorHtmlOmniLength*  >
  let g:acp_behaviorHtmlOmniLength = 0
<
        Length of keyword characters before the cursor, which are needed to
        attempt HTML omni-completion. If negative value, this completion will
        be never attempted.

                                      *g:acp_behaviorCssOmniPropertyLength*  >
  let g:acp_behaviorCssOmniPropertyLength = 1
<
        Length of keyword characters before the cursor, which are needed to
        attempt CSS omni-completion for properties. If negative value, this
        completion will be never attempted.

                                         *g:acp_behaviorCssOmniValueLength*  >
  let g:acp_behaviorCssOmniValueLength = 0
<
        Length of keyword characters before the cursor, which are needed to
        attempt CSS omni-completion for values. If negative value, this
        completion will be never attempted.

                                                           *g:acp_behavior*  >
  let g:acp_behavior = {}
<
        This option is for advanced users. This setting overrides other
        behavior options. This is a |Dictionary|. Each key corresponds to a
        filetype. '*' is default. Each value is a list. These are attempted in
        sequence until completion item is found. Each element is a
        |Dictionary| which has following items:

        "command":                                    *g:acp_behavior-command*
          Command to be fed to open popup menu for completions.

        "completefunc":                          *g:acp_behavior-completefunc*
          'completefunc' will be set to this user-provided function during the
          completion. Only makes sense when "command" is "<C-x><C-u>".

        "meets":                                        *g:acp_behavior-meets*
          Name of the function which dicides whether or not to attempt this
          completion. It will be attempted if this function returns non-zero.
          This function takes a text before the cursor.

        "onPopupClose":                          *g:acp_behavior-onPopupClose*
          Name of the function which is called when popup menu for this
          completion is closed. Following completions will be suppressed if
          this function returns zero.

        "repeat":                                      *g:acp_behavior-repeat*
          If non-zero, the last completion is automatically repeated.


==============================================================================
SPECIAL THANKS                                                    *acp-thanks*

- Daniel Schierbeck
- Ingo Karkat


==============================================================================
CHANGELOG                                                      *acp-changelog*

1.0
  - Added go (http://golang.org) support.
  - Factored out all individual language support into separate files to
    facilitate adding new languages.

==============================================================================
OLD CHANGELOG                                               *old-acp-changelog*

Pre-fork autocomplpop changelog.

2.14.1
  - Changed the way of auto-popup for avoiding an issue about filename
    completion.
  - Fixed a bug that popup menu was opened twice when auto-popup was done.

2.14
  - Added the support for perl-completion.vim.

2.13
  - Changed to sort snipMate's triggers.
  - Fixed a bug that a wasted character was inserted after snipMate's trigger
    completion.

2.12.1
  - Changed to avoid a strange behavior with Microsoft IME.

2.12
  - Added g:acp_behaviorKeywordIgnores option.
  - Added g:acp_behaviorUserDefinedMeets option and removed
    g:acp_behaviorUserDefinedPattern.
  - Changed to do auto-popup only when a buffer is modified.
  - Changed the structure of g:acp_behavior option.
  - Changed to reflect a change of behavior options (named g:acp_behavior*)
    any time it is done.
  - Fixed a bug that completions after omni completions or snipMate's trigger
    completion were never attempted when no candidate for the former
    completions was found.

2.11.1
  - Fixed a bug that a snipMate's trigger could not be expanded when it was
    completed.

2.11
  - Implemented experimental feature which is snipMate's trigger completion.

2.10
  - Improved the response by changing not to attempt any completion when
    keyword characters are entered after a word which has been found that it
    has no completion candidate at the last attempt of completions.
  - Improved the response by changing to close popup menu when <BS> was
    pressed and the text before the cursor would not match with the pattern of
    current behavior.

2.9
  - Changed default behavior to support XML omni completion.
  - Changed default value of g:acp_behaviorKeywordCommand option.
    The option with "\<C-p>" cause a problem which inserts a match without
    <CR> when 'dictionary' has been set and keyword completion is done.
  - Changed to show error message when incompatible with a installed vim.

2.8.1
  - Fixed a bug which inserted a selected match to the next line when
    auto-wrapping (enabled with 'formatoptions') was performed.

2.8
  - Added g:acp_behaviorUserDefinedFunction option and
    g:acp_behaviorUserDefinedPattern option for users who want to make custom
    completion auto-popup.
  - Fixed a bug that setting 'spell' on a new buffer made typing go crazy.

2.7
  - Changed naming conventions for filenames, functions, commands, and options 
    and thus renamed them.
  - Added g:acp_behaviorKeywordCommand option. If you prefer the previous
    behavior for keyword completion, set this option "\<C-n>".
  - Changed default value of g:acp_ignorecaseOption option.

  The following were done by Ingo Karkat:

  - ENH: Added support for setting a user-provided 'completefunc' during the
    completion, configurable via g:acp_behavior. 
  - BUG: When the configured completion is <C-p> or <C-x><C-p>, the command to
    restore the original text (in on_popup_post()) must be reverted, too. 
  - BUG: When using a custom completion function (<C-x><C-u>) that also uses
    an s:...() function name, the s:GetSidPrefix() function dynamically
    determines the wrong SID. Now calling s:DetermineSidPrefix() once during
    sourcing and caching the value in s:SID. 
  - BUG: Should not use custom defined <C-X><C-...> completion mappings. Now
    consistently using unmapped completion commands everywhere. (Beforehand,
    s:PopupFeeder.feed() used mappings via feedkeys(..., 'm'), but
    s:PopupFeeder.on_popup_post() did not due to its invocation via
    :map-expr.) 

2.6:
  - Improved the behavior of omni completion for HTML/XHTML.

2.5:
  - Added some options to customize behavior easily:
      g:AutoComplPop_BehaviorKeywordLength
      g:AutoComplPop_BehaviorFileLength
      g:AutoComplPop_BehaviorRubyOmniMethodLength
      g:AutoComplPop_BehaviorRubyOmniSymbolLength
      g:AutoComplPop_BehaviorPythonOmniLength
      g:AutoComplPop_BehaviorHtmlOmniLength
      g:AutoComplPop_BehaviorCssOmniPropertyLength
      g:AutoComplPop_BehaviorCssOmniValueLength

2.4:
  - Added g:AutoComplPop_MappingDriven option.

2.3.1:
  - Changed to set 'lazyredraw' while a popup menu is visible to avoid
    flickering.
  - Changed a behavior for CSS.
  - Added support for GetLatestVimScripts.

2.3:
  - Added a behavior for Python to support omni completion.
  - Added a behavior for CSS to support omni completion.

2.2:
  - Changed not to work when 'paste' option is set.
  - Fixed AutoComplPopEnable command and AutoComplPopDisable command to
    map/unmap "i" and "R".

2.1:
  - Fixed the problem caused by "." command in Normal mode.
  - Changed to map "i" and "R" to feed completion command after starting
    Insert mode.
  - Avoided the problem caused by Windows IME.

2.0:
  - Changed to use CursorMovedI event to feed a completion command instead of
    key mapping. Now the auto-popup is triggered by moving the cursor.
  - Changed to feed completion command after starting Insert mode.
  - Removed g:AutoComplPop_MapList option.

1.7:
  - Added behaviors for HTML/XHTML. Now supports the omni completion for
    HTML/XHTML.
  - Changed not to show expressions for CTRL-R =.
  - Changed not to set 'nolazyredraw' while a popup menu is visible.

1.6.1:
  - Changed not to trigger the filename completion by a text which has
    multi-byte characters.

1.6:
  - Redesigned g:AutoComplPop_Behavior option.
  - Changed default value of g:AutoComplPop_CompleteOption option.
  - Changed default value of g:AutoComplPop_MapList option.

1.5:
  - Implemented continuous-completion for the filename completion. And added
    new option to g:AutoComplPop_Behavior.

1.4:
  - Fixed the bug that the auto-popup was not suspended in fuzzyfinder.
  - Fixed the bug that an error has occurred with Ruby-omni-completion unless
    Ruby interface.

1.3:
  - Supported Ruby-omni-completion by default.
  - Supported filename completion by default.
  - Added g:AutoComplPop_Behavior option.
  - Added g:AutoComplPop_CompleteoptPreview option.
  - Removed g:AutoComplPop_MinLength option.
  - Removed g:AutoComplPop_MaxLength option.
  - Removed g:AutoComplPop_PopupCmd option.

1.2:
  - Fixed bugs related to 'completeopt'.

1.1:
  - Added g:AutoComplPop_IgnoreCaseOption option.
  - Added g:AutoComplPop_NotEnableAtStartup option.
  - Removed g:AutoComplPop_LoadAndEnable option.
1.0:
  - g:AutoComplPop_LoadAndEnable option for a startup activation is added.
  - AutoComplPopLock command and AutoComplPopUnlock command are added to
    suspend and resume.
  - 'completeopt' and 'complete' options are changed temporarily while
    completing by this script.

0.4:
  - The first match are selected when the popup menu is Opened. You can insert
    the first match with CTRL-Y.

0.3:
  - Fixed the problem that the original text is not restored if 'longest' is
    not set in 'completeopt'. Now the plugin works whether or not 'longest' is
    set in 'completeopt', and also 'menuone'.

0.2:
  - When completion matches are not found, insert CTRL-E to stop completion.
  - Clear the echo area.
  - Fixed the problem in case of dividing words by symbols, popup menu is
    not opened.

0.1:
  - First release.


==============================================================================
ABOUT                                   *acp-about* *acp-contact* *acp-author*

ACP Fork
Author:  John Eikenberry
Licence: MIT Licence
URL:     https://github.com/eikenberry/acp


AutoComplPop Information
Author:  Takeshi NISHIDA <ns9tks@DELETE-ME.gmail.com>
Licence: MIT Licence
URL:     http://www.vim.org/scripts/script.php?script_id=1879
         http://bitbucket.org/ns9tks/vim-autocomplpop/

Bugs/Issues/Suggestions/Improvements ~

Please submit to http://bitbucket.org/ns9tks/vim-autocomplpop/issues/ .

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:



*acp.txt*                  自动弹出补全菜单

               版权所有  (c) 2007-2009 Takeshi NISHIDA

AutoComplPop                                              *autocomplpop* *acp*

简介                            |acp-introduction|
安装                            |acp-installation|
使用                            |acp-usage|
命令                            |acp-commands|
选项                            |acp-options|
特别感谢                        |acp-thanks|
更新历史                        |acp-changelog|
关于                            |acp-about|


==============================================================================
简介                                                        *acp-introduction*

这个插件用于辅助在 插入模式 下输入字符或移动光标时，自动弹出 Vim 补全菜单。
它不会阻碍你继续输入字符。

==============================================================================
安装                                                        *acp-installation*

将所有文件放到 runtime 目录。如果得到的是 zip 压缩文件，将它解压到 runtime
目录即可。

放置的文件如下所示：
>
        <your runtime directory>/plugin/acp.vim
        <your runtime directory>/doc/acp.txt
        ...
<
如果不喜欢将插件和其他插件放在 runtime 目录，可以将文件放在一个新文件夹，
并将这个新文件夹路径放在 'runtimepath' 即可。这样更容易卸载插件。

然后更新帮助文档以便启用 fuzzyfinder 帮助。详细信息请看 |add-local-help|


==============================================================================
使用                                                               *acp-usage*

插件安装以后，自动弹出补全菜单在 vim 启动时默认已经启用。

补全方式依赖于光标前的文本，默认的补全方式如下：

        类别      文件类型    光标前文本 ~
        关键字    *           两个关键字符
        文件名    *           一个文件名字符 + 一个路径分隔符 + 0 或
                              更多的文件名字符
        Omni      ruby        ".", "::" 或 非单词字符 + ":"
                              (需要 |+ruby|)
        Omni      python      "." (需要 |+python|)
        Omni      xml         "<", "</" 或 ("<" + non-">" 字符 + " ")
        Omni      html/xhtml  "<", "</" or ("<" + non-">" 字符 + " ")
        Omni      css         (":", ";", "{", "^", "@", 或 "!")
                              + 0 或 1 个空格

另外，还可以自动补全 用户自定义 或 snipMate(|acp-snipMate|) 的内容。

这些补全行为是可以定制的。

                                                                *acp-snipMate*
snipMate 触发器补全 ~

snipMate 触发器补全可以为 snipMate.vim 插件
(http://www.vim.org/scripts/script.php?script_id=2540)
的触发器做自动补全，并自动展开对应的片段。

要启用这种补全方式，添加如下代码到 plugin/snipMate.vim
>
  fun! GetSnipsInCurrentScope()
    let snips = {}
    for scope in [bufnr('%')] + split(&ft, '\.') + ['_']
      call extend(snips, get(s:snippets, scope, {}), 'keep')
      call extend(snips, get(s:multi_snips, scope, {}), 'keep')
    endfor
    return snips
  endf
<
并且设置 |g:acp_behaviorSnipmateLength| 选项为 1。

这种补全方式有一定的限制，光标前的文本必须是大写字母。
                                                               *acp-perl-omni*
Perl Omni-Completion ~

支持 perl-completion.vim 自动补全
(http://www.vim.org/scripts/script.php?script_id=2852).

要启用这种自动补全，设置 |g:acp_behaviorPerlOmniLength| 选项为 0 或更大值。

==============================================================================
命令                                                            *acp-commands*

                                                                  *:AcpEnable*
:AcpEnable
        开启自动补全。

                                                                 *:AcpDisable*
:AcpDisable
        关闭自动补全。

                                                                    *:AcpLock*
:AcpLock
        临时暂停自动补全

        以便避免与其他的插件脚本冲突，推荐该命令和 |:AcpUnlock| 代替
        |:AcpDisable| 和 |:AcpEnable|
                                                                  *:AcpUnlock*

:AcpUnlock
        重新激活由 |:AcpLock| 命令暂时停止的自动补全。


==============================================================================
选项                                                             *acp-options*

                                                    *g:acp_enableAtStartup*  >
  let g:acp_enableAtStartup = 1
<
        如果设为非零，自动弹出补全菜单在启动 Vim 时启用。

                                                      *g:acp_mappingDriven*  >
  let g:acp_mappingDriven = 0
<
        如果设为非零，补全菜单由按键触发而不是 |CursorMovedI| 事件。有效
        避免在插入模式由光标移动引起的补全菜单的自动弹出。

                                                   *g:acp_ignorecaseOption*  >
  let g:acp_ignorecaseOption = 1
<
        补全菜单自动弹出时，临时将值设为 'ignorecase'。


                                                     *g:acp_completeOption*  >
  let g:acp_completeOption = '.,w,b,k'
<
        补全菜单自动弹出时，临时将值设为 'complete'

                                                 *g:acp_completeoptPreview*  >
  let g:acp_completeoptPreview = 0
<
        如果设为非零，补全菜单自动弹出时，"preview" 会被添加到 'completeopt'
        选项中。

                                        *g:acp_behaviorUserDefinedFunction*  >
  let g:acp_behaviorUserDefinedFunction = ''
<
        |g:acp_behavior-completefunc| 用于用户自定义补全，如果设为空，这种
        补全将不会被启用

                                           *g:acp_behaviorUserDefinedMeets*  >
  let g:acp_behaviorUserDefinedMeets = ''
<
        |g:acp_behavior-meets| 用于用户自定义补全，如果设为空，这种补全将不
        会被启用

                                             *g:acp_behaviorSnipmateLength*  >
  let g:acp_behaviorSnipmateLength = -1
<
        尝试补全 snipMate 触发器所需要的（光标前）字符数量。

                                             *g:acp_behaviorKeywordCommand*  >
  let g:acp_behaviorKeywordCommand = "\<C-n>"
<
        关键词补全命令。该选项通常设置为 "\<C-n>" 或 "\<C-p>"

                                              *g:acp_behaviorKeywordLength*  >
  let g:acp_behaviorKeywordLength = 2
<
        尝试补全关键字所需的（光标前）字符数量。如果为负数，则不启用关键字补全。

                                             *g:acp_behaviorKeywordIgnores*  >
  let g:acp_behaviorKeywordIgnores = []
<
        字符串列表。如果光标之前的单词匹配列表中的任意一项，关键字将不会
        尝试补全。

        例如：有太多的补全关键词以 "get" 起始，当输入 "g","ge",或 "get" 时
        将导致补全反应产生延迟，通过设置 ["get"] 来避免。

                                                 *g:acp_behaviorFileLength*  >
  let g:acp_behaviorFileLength = 0
<
        尝试文件名补全所需（光标前）的字符数量。如果为负数，则不启用文件名补全。

                                       *g:acp_behaviorRubyOmniMethodLength*  >
  let g:acp_behaviorRubyOmniMethodLength = 0
<
        尝试 ruby 函数/方法的智能补全所需的（光标前）字符数量，如果为负数，
        则不会启用这个补全。

                                       *g:acp_behaviorRubyOmniSymbolLength*  >
  let g:acp_behaviorRubyOmniSymbolLength = 1
<
        尝试 ruby 符号智能补全所需的（光标前）字符数量，如果为负数，
        则不会启用这个补全。
                                           *g:acp_behaviorPythonOmniLength*  >
  let g:acp_behaviorPythonOmniLength = 0
<
        尝试 Python 智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。

                                             *g:acp_behaviorPerlOmniLength*  >
  let g:acp_behaviorPerlOmniLength = -1
<
        尝试 Perl 智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。

        另见：|acp-perl-omni|
                                              *g:acp_behaviorXmlOmniLength*  >
  let g:acp_behaviorXmlOmniLength = 0
<
        尝试 XML 智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。
                                             *g:acp_behaviorHtmlOmniLength*  >
  let g:acp_behaviorHtmlOmniLength = 0
<
        尝试 HTML 智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。
                                      *g:acp_behaviorCssOmniPropertyLength*  >
  let g:acp_behaviorCssOmniPropertyLength = 1
<
        尝试 CSS 属性智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。
                                         *g:acp_behaviorCssOmniValueLength*  >
  let g:acp_behaviorCssOmniValueLength = 0
<
        尝试 CSS 属性值智能补全所需的（光标前）字符数量。如果为负数，
        则不启用这个补全。
                                                           *g:acp_behavior*  >
  let g:acp_behavior = {}
<
        该选项适用于高级用户。该设置会覆盖其他类型选项。
        这是一个 |Dictionary|，每一个 键 对应一种文件类型。"*" 为默认值。
        每个值为一个列表，将会试图遍历列表直到补全条目找到为止。
        每个 |Dictionary| 元素如下：

        "command":                                    *g:acp_behavior-command*
          用于打开补全菜单的命令。


        "completefunc":                          *g:acp_behavior-completefunc*
          'completefunc' 可以设置用户自定义的补全函数，只在 "command" 为
          "<C-x><C-u>" 时有意义。

        "meets":                                        *g:acp_behavior-meets*
          决定是否尝试补全的函数名，当这个函数返回非零值时才尝试补全。
          该函数可以获得光标之前的文本。

        "onPopupClose":                          *g:acp_behavior-onPopupClose*
          当补全菜单关闭时，被调用的函数名。
          如果函数返回 0，随后的补全会被取消。

        "repeat":                                      *g:acp_behavior-repeat*
          如果非零，将会自动重复上一次的补全。


==============================================================================
特别感谢                                                          *acp-thanks*

- Daniel Schierbeck
- Ingo Karkat


==============================================================================
更新历史                                                       *acp-changelog*

2.14.1
  - 更改了自动弹出的方式，避免了文件名补全问题
  - 修复了当补全完成时补全菜单弹出两次

2.14
  - 添加了 perl-completion.vim.支持

2.13
  - 修改了snipMate触发器排序方式
  - 修复了 snipMate 补全后插入无效字符

2.12.1
  - 更新，避免同 Microsoft IME 的奇怪的行为

2.12
  - 添加 g:acp_behaviorKeywordIgnores 选项
  - 添加 g:acp_behaviorUserDefinedMeets 选项，并移除
  - 更新 只有当 buffer 修改后才进行自动补全
  - 更新 g:acp_behavior 选项结构
  - 更新 (named g:acp_behavior*) 选项响应行为
  - 修复当没有候选补全选项 snipMate 触发补全不再尝试

2.11.1
  - 修复 snipMate 补全之后不能展开的错误

2.11
  - 尝试加入 snipMate 触发补全特性

2.10
  - 提高了当输入文本后没有候选补全时不进行补全的响应
  - 提高了按下 <BS> 键后关闭补全菜单和光标前的文本没有匹配模式的响应速度

2.9
  - 更新了默认的 XML 补全方式
  - 更新了 g:acp_behaviorKeywordCommand 选项的默认值，当设置 'directory'
    并且完成补全后， "\<C-p>"导致的插入的匹配缺失 <CR>
  - 更新当与安装的 vim 不兼容时的错误提示

2.8.1
  - 修复了当插入匹配时自动换行 ( 启用'formatoptions' 选项）

2.8
  - 为想定制补全的用户添加 g:acp_behaviorUserDefinedFunction 和
    g:acp_behaviorUserDefinedPattern 选项
  - 修复 当在新 buffer 设置 'spell' 输入变得一团糟的错误

2.7
  - 更新了 文件名，函数，命令和选项的命名转换
  - 添加 g:acp_behaviorKeywordCommand 选项。如果你更喜欢选择前一个补全选项，设
    置 "\<C-n>".选项
  - 更新了 g:acp_ignorecaseOption 选项的默认值

  以下为 Ingo Karkat 所做修改：

  - ENH: 添加用户自定义补全函数选项 'completefunc' 通过 g:acp_behavior 配置
  - BUG: 当使用 <C-p> 或 <C-x><C-p>，该命令会恢复原始文本 (in on_popup_post())
    应该返回
  - BUG: 当使用定制的补全函数 (<C-x><C-u>) 需要使用 s:...() 函数名
    s:GetSidPrefix() 动态定义错误 SID。现在在源文件调用 s:DetermineSidPrefix()
    一次捕获 s:SID 值
  - BUG: 不能使用自定义补全快捷键 <C-X><C-...>。现在可以到处使用没有定义的
    快捷键（事先 s:PopupFeeder.feed() 通过调用按键 (..., 'm')，但是
    s:PopupFeeder.on_popup_post() 不是通过调用 :map-expr) [?]

2.6:
  - 提升了补全 HTML/XHTML的补全操作

2.5:
  - 添加了一些简单的自定义操作选项：
      g:AutoComplPop_BehaviorKeywordLength
      g:AutoComplPop_BehaviorFileLength
      g:AutoComplPop_BehaviorRubyOmniMethodLength
      g:AutoComplPop_BehaviorRubyOmniSymbolLength
      g:AutoComplPop_BehaviorPythonOmniLength
      g:AutoComplPop_BehaviorHtmlOmniLength
      g:AutoComplPop_BehaviorCssOmniPropertyLength
      g:AutoComplPop_BehaviorCssOmniValueLength

2.4:
  - 添加 g:AutoComplPop_MappingDriven 选项

2.3.1:
  - 更新 设置 'lazyredraw' 当弹出菜单出现时避免闪烁
  - 更新补全CSS的操作
  - 添加对 GetLatestVimScripts 的支持

2.3:
  - 添加对 Python 补全操作的支持
  - 添加对 CSS 补全操作的支持

2.2:
  - 更新 当 'paste' 选项开启后，停止补全
  - 修复 AutoComplPopEnable 和 AutoComplPopDisable 命令以映射/取消映射
    "i" 和 "R" 按键

2.1:
  - 修复普通模式下 "." 操作引发的问题
  - 更新 在进入插入模式后，按键映射 "i" 和 "R" 加载补全命令
  - 避免由 Windows IME 引发的问题


2.0:
  - 更新 使用 CursorMovedI    事件加载补全命令代替快捷键。现在补全命令通过移动
    光标触发自动补全
  - 更新在进入插入模式载补全命令
  - 移除 g:AutoComplPop_MapList 选项

1.7:
  - 添加 HTML/XHTML 支持。现在支持 HTML/XHTML 的自动补全
  - 更新 不再显示 CTRL-R = 表达式
  - 更新 当弹出菜单可见，不应设置 'nolazyredraw'

1.6.1:
  - 更新包含多字节字符不再触发文件名补全

1.6:
  - 重新设计  g:AutoComplPop_Behavior 选项
  - 更新 g:AutoComplPop_CompleteOption 的默认值
  - 更新 g:AutoComplPop_MapList 的默认值

1.5:
  - 实现对文件名的连续性补全，并且添加 g:AutoComplPop_Behavior 选项

1.4:
  - 修复了在 fuzzyfinder 弹出菜单不能暂时停止弹出
  - 修复了如果不是 Ruby 接口 Ruby-omni-completion 补全会产生错误

1.3:
  - 默认支持 Ruby-omni-completion 补全
  - 默认支持 文件名补全
  - 添加选项 g:AutoComplPop_Behavior
  - 添加选项 g:AutoComplPop_CompleteoptPreview
  - 移除选项 g:AutoComplPop_MinLength
  - 移除选项 g:AutoComplPop_MaxLength
  - 移除选项 g:AutoComplPop_PopupCmd

1.2:
  - 修复了与 'completeopt' 有关的错误

1.1:
  - 添加选项 g:AutoComplPop_IgnoreCaseOption
  - 添加选项 g:AutoComplPop_NotEnableAtStartup
  - 移除选项 g:AutoComplPop_LoadAndEnable

1.0:
  - g:AutoComplPop_LoadAndEnable 选项启动默认开启
  - AutoComplPopLock 和 AutoComplPopUnlock 选项实现补全暂时开关
  - 'completeopt' 和 'complete' 选项暂时改变当补全这脚本文件

0.4:
  - 当弹出菜单后第一个匹配选项为选中状态，你可以按 CTRL-Y 插入第一个匹配选项

0.3:
  - 修复 'completeopt' 选项如果没有设置为 'longest' 不会恢复原始文本问题。现在
    插件无论是否设置 'completeopt'的 'longest' 以及 'menuone' 选项都可以工作

0.2:
  - 当没有找到补全选项，按 CTRL-E 停止补全
  - 清理输出区域
  - 修复被分隔符分隔的单词补全菜单不能弹出的问题

0.1:
  - 第一版发行


==============================================================================
关于                                    *acp-about* *acp-contact* *acp-author*

作者 :  Takeshi NISHIDA <ns9tks@DELETE-ME.gmail.com>
协议 :  MIT Licence
链接 :  http://www.vim.org/scripts/script.php?script_id=1879
        http://bitbucket.org/ns9tks/vim-autocomplpop/

Bugs/Issues/Suggestions/Improvements ~
错误/问题/建议/性能提升

请提交到 http://bitbucket.org/ns9tks/vim-autocomplpop/issues/

==============================================================================
翻译                                    绿洲        *volcanowill[at]gmail.com*

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
